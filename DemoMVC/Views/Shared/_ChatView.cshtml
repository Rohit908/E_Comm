
<div class="container" style="position:fixed;width:400px;height:500px;z-index:100;bottom:5px;right:5px;">
    <div id="close" style="position:absolute;top:2%;right:5%;text-align:center;display:none;">
        <ion-icon name="close-circle" style="font-size:30px"></ion-icon>
    </div>
    <div id="chatWindow" class="rounded" style="border:1px solid cyan;padding-left:18px;padding-right:30px;padding-top:50px;height:100%;width:100%;box-shadow:0px 2px 20px 1px cyan;display:none;background:linear-gradient(49deg,#1A0933,#30115E);">
        <div style="height:100%;display:grid;grid-template-rows:10fr 1fr 1fr">
            <div class="row p-1" style="height:100%;overflow-y:scroll;">
                <div class="col-6">
                    <ul id="messagesList"></ul>
                </div>
            </div>
            <div class="row p-1">
                <div class="col-12">
                    <hr />
                </div>
            </div>
            <div style="display:block;bottom:15px;">
            <div class="row p-1">
                <div class="col-12 input-group">
                    <input type="text" class="w-75 form-control" style="background:linear-gradient(30deg, #f9f9f9, white);color:black !important;" id="messageInput" />
                    <button type="button" class="btn btn-primary" id="sendButton"><ion-icon name="send-outline"></ion-icon></button>
                </div>
            </div>
            <div class="row p-1 mt-3">
            <div class="col-12 text-end">
            </div>
        </div>
        </div>
        </div>
    </div>
    <div id="icon" style="position:absolute;bottom:5px;right:15px;width:30px;height:30px;border:1px solid white;border-radius: 20px 0 0 0;">
        <div></div>
    </div>
</div>


<script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
<script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
<script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
<script>
    var connection = new signalR.HubConnectionBuilder().withUrl("/myHub").build();

    //Disable the send button until connection is established.
    document.getElementById("sendButton").disabled = true;

    connection.on("ReceiveMessage", function (user, message) {
        var li = document.createElement("li");
        document.getElementById("messagesList").appendChild(li);
        // We can assign user-supplied strings to an element's textContent because it
        // is not interpreted as markup. If you're assigning in any other way, you
        // should be aware of possible script injection concerns.
        li.textContent = `${user} says ${message}`;
    });

    connection.start().then(function () {
        document.getElementById("sendButton").disabled = false;
    }).catch(function (err) {
        return console.error(err.toString());
    });

    document.getElementById("sendButton").addEventListener("click", function (event) {
        var user = 'rohit';
        var message = document.getElementById("messageInput").value;
        connection.invoke("SendMessage", user, message).catch(function (err) {
            return console.error(err.toString());
        });
        event.preventDefault();
    });

    $('#icon,#close').on('click', x =>{
        if ($("#chatWindow").is(":visible")) {
            $('#chatWindow').hide();
            $('#close').hide();
            $('#icon').show();
        }
        else{
            $('#chatWindow').show();
            $('#close').show();
            $('#icon').hide();
        }
    });

</script>